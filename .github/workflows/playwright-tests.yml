name: 🎭 Playwright BDD Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of tests to run'
        required: true
        default: 'smoke'
        type: choice
        options: [smoke, login, cart, checkout, sorting, all]
      debug_mode:
        description: 'Enable debug mode for troubleshooting'
        required: false
        default: false
        type: boolean

# Add workflow-level permissions for GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

env:
  NODE_VERSION: '20'
  PLAYWRIGHT_BROWSERS: 'chromium'
  RETENTION_DAYS_ARTIFACTS: 7
  RETENTION_DAYS_SCREENSHOTS: 7
  GLOBAL_TIMEOUT_MINUTES: 90

jobs:
  code-quality:
    name: 🔍 Code Quality
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🧹 Lint check
        run: npm run lint:check

  test-execution:
    name: 🧪 Test Execution
    runs-on: ubuntu-latest
    needs: code-quality
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        browser: [chromium]
    
    env:
      BROWSER: ${{ matrix.browser }}
      CI: true
      HEADLESS: true
      TEST_TYPE: ${{ github.event.inputs.test_type || 'all' }}
      DEBUG_MODE: ${{ github.event.inputs.debug_mode == 'true' }}

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🎭 Install Playwright browsers
        run: npx playwright install --with-deps ${{ matrix.browser }}

      - name: 🔍 Environment verification
        run: |
          cat << 'EOF'
          === Environment Information ===
          Node: $(node -v)
          NPM: $(npm -v) 
          Playwright: $(npx playwright --version)
          Browser: ${{ env.BROWSER }}
          Test Type: ${{ env.TEST_TYPE }}
          Debug Mode: ${{ env.DEBUG_MODE }}
          EOF

      - name: 🧪 Browser compatibility test
        run: |
          node -e "
          const { ${{ matrix.browser }} } = require('@playwright/test');
          (async () => {
            try {
              console.log('🚀 Launching ${{ matrix.browser }}...');
              const browser = await ${{ matrix.browser }}.launch({ headless: true });
              console.log('✅ Browser launched successfully');
              await browser.close();
              console.log('✅ Browser closed successfully');
            } catch (error) {
              console.error('❌ Browser test failed:', error.message);
              process.exit(1);
            }
          })();
          "

      - name: 🏃‍♂️ Execute BDD tests
        timeout-minutes: 20
        run: |
          # Setup environment
          if [ "$DEBUG_MODE" = "true" ]; then
            export DEBUG=cucumber*
            echo "🐛 Debug mode enabled"
          fi
          
          # Create required directories
          mkdir -p {test-results,allure-results,reports,screenshots}
          chmod 755 {test-results,allure-results,reports,screenshots}
          
          # Generate test info
          cat > test-results/test-info.txt << EOF
          Browser: ${{ env.BROWSER }}
          Test Type: ${{ env.TEST_TYPE }}
          Started: $(date)
          Trigger: ${{ github.event_name }}
          Actor: @${{ github.actor }}
          EOF
          
          # Clean previous results
          rm -rf allure-results/*
          
          # Build and execute test command
          BASE_CMD="npx cucumber-js --profile headless"
          FORMATTERS="--format @cucumber/pretty-formatter --format allure-cucumberjs/reporter"
          FORMAT_OPTIONS="--format-options '{\"resultsDir\": \"allure-results\"}'"
          
          case "${{ env.TEST_TYPE }}" in
            smoke|login|cart|checkout|sorting)
              TAG_FILTER="--tags '@${{ env.TEST_TYPE }}'"
              ;;
            all|*)
              TAG_FILTER=""
              ;;
          esac
          
          TEST_COMMAND="$BASE_CMD $FORMATTERS $FORMAT_OPTIONS $TAG_FILTER"
          
          echo "📋 Executing: $TEST_COMMAND"
          echo "🚀 Starting test execution..."
          
          if eval "$TEST_COMMAND" 2>&1 | tee test-execution.log; then
            echo "✅ Tests completed successfully"
            TEST_STATUS="PASSED"
          else
            echo "❌ Tests failed"
            TEST_STATUS="FAILED"
            tail -20 test-execution.log
          fi
          
          # Update test info
          cat >> test-results/test-info.txt << EOF
          Completed: $(date)
          Status: $TEST_STATUS
          Results Count: $(find allure-results -name '*.json' 2>/dev/null | wc -l)
          Screenshots: $(find screenshots -name 'failure-*.png' 2>/dev/null | wc -l)
          EOF
          
          # Generate test summary
          node scripts/test-summary.js 2>/dev/null || echo "⚠️ Test summary failed"
          
          # Create environment files for Allure
          cat > allure-results/environment.properties << EOF
          Browser=${{ env.BROWSER }}
          Platform=ubuntu-latest
          CI=true
          Headless=true
          Node.Version=$(node -v)
          Playwright.Version=$(npx playwright --version)
          Test.Type=${{ env.TEST_TYPE }}
          Execution.Date=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
          Triggered.By=@${{ github.actor }}
          Trigger.Event=${{ github.event_name }}
          EOF
          
          cat > allure-results/executor.json << EOF
          {
            "name": "GitHub Actions - ${{ env.BROWSER }}",
            "type": "github-actions",
            "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}",
            "buildOrder": ${{ github.run_number }},
            "buildName": "${{ env.BROWSER }} Tests - @${{ github.actor }}",
            "buildUrl": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}",
            "reportName": "Playwright BDD - ${{ env.BROWSER }}",
            "triggeredBy": "${{ github.actor }}",
            "triggerEvent": "${{ github.event_name }}",
            "runId": "${{ github.run_id }}",
            "runNumber": ${{ github.run_number }}
          }
          EOF
          
          # Show final status
          echo "📊 Final Results:"
          cat test-results/test-info.txt
          
          # Exit with error if tests failed
          [ "$TEST_STATUS" = "FAILED" ] && exit 1 || exit 0

      - name: 📸 Upload screenshots
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: screenshots-${{ matrix.browser }}
          path: screenshots/
          retention-days: ${{ env.RETENTION_DAYS_SCREENSHOTS }}
          if-no-files-found: ignore

      - name: 📁 Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.browser }}
          path: |
            test-results/
            allure-results/
            test-execution.log
          retention-days: ${{ env.RETENTION_DAYS_ARTIFACTS }}

  nuclear-option:
    name: 🚀 Screenshot Enhancement
    runs-on: ubuntu-latest
    needs: test-execution
    if: always()
    timeout-minutes: 15
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: ⬇️ Download artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: '{test-results,screenshots}-*'
          path: artifacts/
          merge-multiple: true

      - name: 🔧 Prepare enhancement environment
        run: |
          echo "🚀 Setting up nuclear option environment..."
          mkdir -p {allure-results,screenshots}
          
          # Copy artifacts
          find artifacts -name "*.json" -path "*/allure-results/*" -exec cp {} allure-results/ \; 2>/dev/null || true
          find artifacts -name "*.csv" -path "*/allure-results/*" -exec cp {} allure-results/ \; 2>/dev/null || true  
          find artifacts -name "*.properties" -path "*/allure-results/*" -exec cp {} allure-results/ \; 2>/dev/null || true
          find artifacts -name "*.png" -exec cp {} screenshots/ \; 2>/dev/null || true
          
          echo "📊 Pre-enhancement state:"
          echo "Allure results: $(ls -1 allure-results/ 2>/dev/null | wc -l) files"
          echo "Screenshots: $(ls -1 screenshots/ 2>/dev/null | wc -l) files"

      - name: 🚀 Execute nuclear option
        run: |
          echo "🚀 NUCLEAR OPTION: Starting screenshot injection..."
          
          if node scripts/nuclear-option.js; then
            echo "✅ Nuclear option completed successfully"
          else
            echo "⚠️ Nuclear option encountered issues (continuing)"
          fi
          
          ATTACHMENT_COUNT=$(find allure-results -name "*attachment*.png" 2>/dev/null | wc -l)
          echo "📸 Injected $ATTACHMENT_COUNT screenshot attachments"

      - name: 📤 Upload enhanced results
        uses: actions/upload-artifact@v4
        with:
          name: nuclear-enhanced-allure-results
          path: allure-results/
          retention-days: ${{ env.RETENTION_DAYS_ARTIFACTS }}

  report-generation:
    name: 📊 Report Generation
    runs-on: ubuntu-latest
    needs: [test-execution, nuclear-option]
    if: always()
    timeout-minutes: 15

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js and Allure
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: |
          npm ci
          npm install -g allure-commandline

      - name: ⬇️ Download enhanced results
        uses: actions/download-artifact@v4
        with:
          name: nuclear-enhanced-allure-results
          path: allure-results/
        continue-on-error: true

      - name: ⬇️ Download fallback results
        if: steps.download-enhanced.outcome == 'failure'
        uses: actions/download-artifact@v4
        with:
          pattern: 'test-results-*'
          path: fallback-results/
          merge-multiple: true

      - name: 📊 Generate comprehensive reports
        run: |
          # Ensure we have results to work with
          if [ ! -d "allure-results" ] || [ ! "$(ls -A allure-results 2>/dev/null)" ]; then
            echo "⚠️ No enhanced results, using fallback..."
            rm -rf allure-results && mkdir -p allure-results
            find fallback-results -name "*.json" -path "*/allure-results/*" -exec cp {} allure-results/ \; 2>/dev/null || true
          fi
          
          # Create combined environment properties
          cat > allure-results/environment.properties << EOF
          Test.Suite=Playwright BDD Cross-Browser Testing
          Browsers.Tested=${{ env.PLAYWRIGHT_BROWSERS }}
          Platform=ubuntu-latest
          CI.Provider=GitHub Actions
          Execution.Mode=Headless
          Node.Version=$(node -v)
          Test.Framework=Cucumber + Playwright + Screenplay Pattern
          Test.Type=${{ github.event.inputs.test_type || 'all' }}
          Execution.Date=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
          Repository=${{ github.repository }}
          Branch=${{ github.ref_name }}
          Commit=${{ github.sha }}
          Triggered.By=@${{ github.actor }}
          Trigger.Event=${{ github.event_name }}
          Run.ID=${{ github.run_id }}
          Run.Number=${{ github.run_number }}
          EOF
          
          # Create executor info
          cat > allure-results/executor.json << EOF
          {
            "name": "GitHub Actions - Cross Browser",
            "type": "github-actions",
            "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}",
            "buildOrder": ${{ github.run_number }},
            "buildName": "BDD Tests - @${{ github.actor }}",
            "buildUrl": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}",
            "reportName": "Playwright BDD Report",
            "triggeredBy": "${{ github.actor }}",
            "triggerEvent": "${{ github.event_name }}",
            "runId": "${{ github.run_id }}",
            "runNumber": ${{ github.run_number }}
          }
          EOF
          
          # Generate reports
          if [ "$(ls -A allure-results 2>/dev/null)" ]; then
            echo "✅ Generating Allure report..."
            npm run allure:generate
            echo "✅ Allure report generated"
          else
            echo "⚠️ No results found, creating placeholder..."
            mkdir -p allure-report
            echo "<html><body><h1>No test results found</h1></body></html>" > allure-report/index.html
          fi
          
          # Generate Cucumber HTML report (fallback)
          mkdir -p reports
          npm run generate-report 2>/dev/null || {
            cat > reports/index.html << 'EOF'
          <!DOCTYPE html>
          <html><head><title>Test Summary</title></head>
          <body>
          <h1>🎭 Playwright BDD Test Summary</h1>
          <p>Cross-browser test execution completed.</p>
          <p>For detailed results, check the Allure report.</p>
          </body></html>
          EOF
          }

      - name: 📤 Upload reports
        uses: actions/upload-artifact@v4
        with:
          name: test-reports
          path: |
            allure-report/
            reports/
          retention-days: ${{ env.RETENTION_DAYS_ARTIFACTS }}

  deploy-reports:
    name: 🚀 Deploy to GitHub Pages
    runs-on: ubuntu-latest
    needs: report-generation
    if: always() && github.ref == 'refs/heads/main'
    timeout-minutes: 10
    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: ⬇️ Download reports
        uses: actions/download-artifact@v4
        with:
          name: test-reports
          path: reports-download/

      - name: 🏗️ Create deployment structure
        run: |
          mkdir -p public/{allure,cucumber}
          
          # Copy reports if they exist
          [ -d "reports-download/allure-report" ] && cp -r reports-download/allure-report/* public/allure/ || echo "No Allure report"
          [ -d "reports-download/reports" ] && cp -r reports-download/reports/* public/cucumber/ || echo "No Cucumber report"
          
          # Create index page
          cat > public/index.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
              <title>🎭 Playwright BDD Test Reports</title>
              <style>
                  body { font-family: Arial, sans-serif; margin: 40px; background: #f5f5f5; }
                  .container { max-width: 800px; margin: 0 auto; background: white; padding: 30px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
                  h1 { color: #333; text-align: center; }
                  .reports { display: flex; gap: 20px; margin-top: 30px; }
                  .report-card { flex: 1; border: 2px solid #ddd; border-radius: 8px; padding: 20px; text-align: center; transition: transform 0.2s; }
                  .report-card:hover { transform: translateY(-2px); border-color: #007bff; }
                  .report-card a { text-decoration: none; color: #007bff; font-weight: bold; font-size: 18px; }
                  .report-card p { color: #666; margin-top: 10px; }
                  .badge { background: #28a745; color: white; padding: 4px 8px; border-radius: 4px; font-size: 12px; }
                  .footer { margin-top: 30px; text-align: center; color: #888; font-size: 14px; }
              </style>
          </head>
          <body>
              <div class="container">
                  <h1>🎭 Playwright BDD Test Reports</h1>
                  <p style="text-align: center; color: #666;">SauceDemo E-commerce Testing Suite</p>
                  
                  <div class="reports">
                      <div class="report-card">
                          <a href="./allure/index.html" target="_blank">📊 Allure Report</a>
                          <p>Comprehensive test execution analytics with screenshots, timings, and detailed step-by-step results.</p>
                          <span class="badge">Interactive</span>
                      </div>
                      
                      <div class="report-card">
                          <a href="./cucumber/" target="_blank">🥒 Cucumber HTML Report</a>
                          <p>Business-readable BDD scenarios with Gherkin syntax and feature documentation.</p>
                          <span class="badge">BDD</span>
                      </div>
                  </div>
                  
                  <div class="footer">
                      Generated: $(date)<br>
                      <a href="${{ github.server_url }}/${{ github.repository }}" target="_blank">🔗 View Source Code</a>
                  </div>
              </div>
          </body>
          </html>
          EOF

      - name: 🔧 Setup Pages
        uses: actions/configure-pages@v4

      - name: 📤 Upload Pages artifact  
        uses: actions/upload-pages-artifact@v3
        with:
          path: public/

      - name: 🚀 Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
