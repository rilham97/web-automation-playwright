name: 🎭 Playwright BDD Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of tests to run'
        required: true
        default: 'all'
        type: choice
        options:
        - all
        - smoke
        - login
        - cart
        - checkout
        - sorting

# Add workflow-level permissions for GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  code-quality:
    name: 🔍 Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: 📋 Install dependencies
        run: npm ci

      - name: 🧹 Run ESLint
        run: npm run lint:check

  test-execution:
    name: 🧪 Tests (${{ matrix.browser }})
    runs-on: ubuntu-latest
    needs: code-quality
    strategy:
      fail-fast: false
      matrix:
        browser: [chromium]

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: 📋 Install dependencies
        run: npm ci

      - name: 🎭 Install Playwright browsers
        run: npx playwright install --with-deps ${{ matrix.browser }}

      - name: 🔍 Verify Environment 
        run: |
          echo "Node version: $(node -v)"
          echo "NPM version: $(npm -v)"
          echo "Playwright version: $(npx playwright --version)"
          echo "Available browsers: $(npx playwright install --dry-run)"
          echo "BROWSER environment variable: $BROWSER"
          echo "CI environment variable: $CI"
          echo "HEADLESS environment variable: $HEADLESS"

      - name: 🧪 Test Browser Compatibility
        env:
          BROWSER: ${{ matrix.browser }}
          CI: true
          HEADLESS: true
        run: |
          echo "Testing if $BROWSER browser can launch..."
          node -e "
          const { ${{ matrix.browser }} } = require('@playwright/test');
          (async () => {
            try {
              console.log('Attempting to launch ${{ matrix.browser }}...');
              const browser = await ${{ matrix.browser }}.launch({ headless: true });
              console.log('✅ ${{ matrix.browser }} launched successfully');
              await browser.close();
              console.log('✅ ${{ matrix.browser }} closed successfully');
            } catch (error) {
              console.error('❌ Failed to launch ${{ matrix.browser }}:', error.message);
              process.exit(1);
            }
          })();
          "

      - name: 🧪 Test Cucumber Configuration
        env:
          BROWSER: ${{ matrix.browser }}
          CI: true
          HEADLESS: true
        run: |
          echo "🔍 Testing cucumber configuration with $BROWSER..."
          echo "Available npm scripts:"
          npm run | grep bdd || echo "No BDD scripts found"
          echo "Testing cucumber config:"
          npx cucumber-js --version || echo "Cucumber not found"
          echo "Environment check:"
          echo "NODE_ENV: ${NODE_ENV:-not set}"
          echo "BROWSER: ${BROWSER:-not set}"
          echo "Cucumber profiles:"
          npx cucumber-js --help | grep -A 10 "profile" || echo "No profile help found"

      - name: 🏃‍♂️ Run BDD Tests
        env:
          BROWSER: ${{ matrix.browser }}
          CI: true
          HEADLESS: true
        run: |
          echo "🎭 Starting BDD tests with $BROWSER browser..."
          
          # Create directories to ensure artifacts exist
          mkdir -p test-results allure-results reports screenshots
          
          # Create a basic test status file
          echo "Browser: $BROWSER" > test-results/test-info.txt
          echo "Started: $(date)" >> test-results/test-info.txt
          
          # Run tests based on input or default to all tests
          TEST_TYPE="${{ github.event.inputs.test_type }}"
          echo "🎯 Test type requested: ${TEST_TYPE:-'all (default)'}"
          
          # Nuclear Option commands for screenshot attachment
          TEST_COMMAND=""
          if [ "$TEST_TYPE" = "smoke" ]; then
            echo "🔍 Running smoke tests with $BROWSER (Nuclear Option enabled)..."
            TEST_COMMAND="npx cucumber-js --profile headless --tags '@smoke' --format allure-cucumberjs/reporter; node scripts/nuclear-option.js"
          elif [ "$TEST_TYPE" = "login" ]; then
            echo "🔍 Running login tests with $BROWSER (Nuclear Option enabled)..."
            TEST_COMMAND="npx cucumber-js --profile headless --tags '@login' --format allure-cucumberjs/reporter; node scripts/nuclear-option.js"
          elif [ "$TEST_TYPE" = "cart" ]; then
            echo "🔍 Running cart tests with $BROWSER (Nuclear Option enabled)..."
            TEST_COMMAND="npx cucumber-js --profile headless --tags '@cart' --format allure-cucumberjs/reporter; node scripts/nuclear-option.js"
          elif [ "$TEST_TYPE" = "checkout" ]; then
            echo "🔍 Running checkout tests with $BROWSER (Nuclear Option enabled)..."
            TEST_COMMAND="npx cucumber-js --profile headless --tags '@checkout' --format allure-cucumberjs/reporter; node scripts/nuclear-option.js"
          elif [ "$TEST_TYPE" = "sorting" ]; then
            echo "🔍 Running sorting tests with $BROWSER (Nuclear Option enabled)..."
            TEST_COMMAND="npx cucumber-js --profile headless --tags '@sorting' --format allure-cucumberjs/reporter; node scripts/nuclear-option.js"
          else
            echo "🔍 Running all tests with $BROWSER (Nuclear Option enabled)..."
            TEST_COMMAND="npx cucumber-js --profile headless --format allure-cucumberjs/reporter; node scripts/nuclear-option.js"
          fi
          
          echo "📋 Executing command: $TEST_COMMAND"
          
          # Execute tests and capture results
          if $TEST_COMMAND 2>&1 | tee test-execution-log.txt; then
            echo "✅ Tests completed successfully for $BROWSER"
            TEST_STATUS="PASSED"
          else
            echo "❌ Tests failed for $BROWSER"
            echo "📋 Last 30 lines of output:"
            tail -30 test-execution-log.txt
            TEST_STATUS="FAILED"
            # Don't exit here - we want to collect artifacts even on failure
          fi
          
          # Verify that test artifacts were actually generated
          echo "📁 Checking what was generated:"
          ls -la test-results/ || echo "No test-results directory"
          ls -la allure-results/ || echo "No allure-results directory"  
          ls -la reports/ || echo "No reports directory"
          
          # Check if allure results were generated
          if [ -d "allure-results" ] && [ "$(ls -A allure-results 2>/dev/null)" ]; then
            echo "✅ Allure results generated successfully"
            ls -la allure-results/
          else
            echo "⚠️ No allure results generated - tests may not have run properly"
          fi
          
          # Create Allure environment.properties for this browser
          cat > allure-results/environment.properties << EOF
          Browser=$BROWSER
          Platform=ubuntu-latest
          CI=true
          Headless=true
          Node.Version=$(node -v)
          Playwright.Version=$(npx playwright --version)
          Test.Type=${TEST_TYPE:-all}
          Execution.Date=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
          Triggered.By=@$GITHUB_ACTOR
          Trigger.Event=$GITHUB_EVENT_NAME
          EOF
          
          # Create Allure executor.json for this browser  
          cat > allure-results/executor.json << EOF
          {
            "name": "GitHub Actions - $BROWSER",
            "type": "github-actions", 
            "url": "$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID",
            "buildOrder": $GITHUB_RUN_NUMBER,
            "buildName": "$BROWSER Browser Tests - @$GITHUB_ACTOR",
            "buildUrl": "$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID",
            "reportName": "Playwright BDD - $BROWSER",
            "reportUrl": "$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID",
            "triggeredBy": "$GITHUB_ACTOR",
            "triggerEvent": "$GITHUB_EVENT_NAME"
          }
          EOF
          
          # Record completion and status
          echo "Completed: $(date)" >> test-results/test-info.txt
          echo "Status: $TEST_STATUS" >> test-results/test-info.txt
          
          # Check for failure screenshots (individual scenario failures)
          SCREENSHOT_COUNT=0
          if [ -d "screenshots" ]; then
            SCREENSHOT_COUNT=$(find screenshots -name "failure-*.png" | wc -l)
            if [ "$SCREENSHOT_COUNT" -gt 0 ]; then
              echo "⚠️ Found $SCREENSHOT_COUNT failure screenshots - some scenarios failed"
              echo "📸 Screenshots will be uploaded for analysis"
              ls -la screenshots/failure-*.png || echo "No failure screenshots found with ls"
            fi
          fi
          
          # Show final test-info.txt content
          echo "📄 Final test-info.txt content:"
          cat test-results/test-info.txt
          
          # Add screenshot info to test results
          echo "Failure.Screenshots: $SCREENSHOT_COUNT" >> test-results/test-info.txt
          
          # Exit with error if tests failed (after collecting artifacts)
          if [ "$TEST_STATUS" = "FAILED" ]; then
            echo "💥 Failing job due to test failures"
            exit 1
          fi

      - name: 📸 Upload screenshots (if any exist)
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: screenshots-${{ matrix.browser }}
          path: screenshots/
          retention-days: 7
          if-no-files-found: ignore

      - name: 📁 Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.browser }}
          path: |
            test-results/
            allure-results/
          retention-days: 30

  allure-report:
    name: 📊 Generate Allure Report
    runs-on: ubuntu-latest
    needs: test-execution
    if: always()

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: 📋 Install dependencies
        run: npm ci

      - name: 🔧 Install Allure CLI
        run: npm install -g allure-commandline

      - name: ⬇️ Download all test results
        uses: actions/download-artifact@v4
        with:
          pattern: test-results-*
          path: collected-results/
          merge-multiple: true

      - name: 📸 Download screenshots from failed tests
        uses: actions/download-artifact@v4
        with:
          pattern: screenshots-*
          path: collected-screenshots/
          merge-multiple: true
        continue-on-error: true

      - name: 📊 Generate Allure Report
        run: |
          echo "🔍 Debugging collected results..."
          ls -la collected-results/ || echo "No collected-results directory"
          find collected-results -type f | head -20
          
          # Create fresh allure-results directory
          rm -rf allure-results
          mkdir -p allure-results
          
          # Combine all allure results from different browsers
          echo "🔄 Combining allure results from all browsers..."
          find collected-results -name "*.json" -path "*/allure-results/*" -exec cp {} allure-results/ \; || echo "No JSON files found"
          find collected-results -name "*.csv" -path "*/allure-results/*" -exec cp {} allure-results/ \; || echo "No CSV files found"
          
          # Nuclear Option should have already injected screenshots into JSON files
          # This section copies any remaining loose screenshots as backup
          echo "📸 Copying any remaining screenshots to Allure report..."
          if [ -d "collected-screenshots" ]; then
            mkdir -p allure-results/screenshots
            find collected-screenshots -name "*.png" -exec cp {} allure-results/screenshots/ \; || echo "No screenshots found"
            find collected-screenshots -name "*.jpg" -exec cp {} allure-results/screenshots/ \; || echo "No JPG screenshots found"
            echo "✅ Screenshots copied to allure results (backup)"
            ls -la allure-results/screenshots/ || echo "No screenshots directory"
          else
            echo "⚠️ No screenshots directory found - tests may have all passed"
          fi
          
          # Merge environment properties from all browsers
          echo "🔄 Merging environment information..."
          cat > allure-results/environment.properties << EOF
          Test.Suite=Playwright BDD Cross-Browser Testing
          Browsers.Tested=chromium,firefox
          Platform=ubuntu-latest
          CI.Provider=GitHub Actions
          Execution.Mode=Headless
          Node.Version=$(node -v)
          Test.Framework=Cucumber + Playwright + Screenplay Pattern
          Test.Type=${TEST_TYPE:-all}
          Execution.Date=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
          Repository=$GITHUB_REPOSITORY
          Branch=$GITHUB_REF_NAME
          Commit=$GITHUB_SHA
          Triggered.By=@$GITHUB_ACTOR
          Trigger.Event=$GITHUB_EVENT_NAME
          Run.ID=$GITHUB_RUN_ID
          Run.Number=$GITHUB_RUN_NUMBER
          EOF
          
          # Create combined executor.json
          cat > allure-results/executor.json << EOF
          {
            "name": "GitHub Actions - Cross Browser",
            "type": "github-actions",
            "url": "$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID",
            "buildOrder": $GITHUB_RUN_NUMBER,
            "buildName": "Cross-Browser BDD Tests - @$GITHUB_ACTOR",
            "buildUrl": "$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID",
            "reportName": "Playwright BDD Cross-Browser Report",
            "reportUrl": "https://rilham97.github.io/web-automation-playwright/",
            "triggeredBy": "$GITHUB_ACTOR",
            "triggerEvent": "$GITHUB_EVENT_NAME",
            "runId": "$GITHUB_RUN_ID",
            "runNumber": $GITHUB_RUN_NUMBER
          }
          EOF
          
          echo "🔍 Final allure-results directory:"
          ls -la allure-results/ || echo "No allure-results directory"
          
          # Generate report only if we have results
          if [ "$(ls -A allure-results 2>/dev/null)" ]; then
            echo "✅ Generating Allure report..."
            npm run allure:generate
            echo "✅ Allure report generated successfully"
          else
            echo "⚠️ No allure results found, creating empty report directory"
            mkdir -p allure-report
            echo "<html><body><h1>No test results found</h1></body></html>" > allure-report/index.html
          fi

      - name: 🏗️ Generate Cucumber HTML Report (Fallback)
        run: |
          echo "📁 Checking for available cucumber reports..."
          find collected-results -name "*.json" -type f | head -10
          ls -la collected-results/ || echo "No collected-results directory"
          
          # Try to create a basic HTML report even if cucumber data is missing
          mkdir -p reports
          if [ -f "collected-results/cucumber-report.json" ] || find collected-results -name "*cucumber*.json" -type f | grep -q .; then
            echo "✅ Found cucumber JSON files, generating HTML report..."
            npm run generate-report || echo "❌ Cucumber HTML report generation failed"
          else
            echo "⚠️ No cucumber JSON files found, creating basic summary report..."
            cat > reports/index.html << 'EOF'
          <!DOCTYPE html>
          <html><head><title>Test Summary</title></head>
          <body>
          <h1>🎭 Playwright BDD Test Summary</h1>
          <p>Cross-browser test execution completed.</p>
          <p>For detailed results, check the Allure report.</p>
          <ul>
          <li>✅ Chromium tests executed</li>
          <li>✅ Firefox tests executed</li>
          </ul>
          </body></html>
          EOF
            echo "✅ Created basic summary report"
          fi

      - name: 📤 Upload Allure Report
        uses: actions/upload-artifact@v4
        with:
          name: allure-report
          path: allure-report/
          retention-days: 30

      - name: 📤 Upload HTML Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: cucumber-html-report
          path: reports/
          retention-days: 30

  deploy-reports:
    name: 🚀 Deploy Reports to GitHub Pages
    runs-on: ubuntu-latest
    needs: allure-report
    if: always() && github.ref == 'refs/heads/main'
    permissions:
      contents: read
      pages: write
      id-token: write

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: ⬇️ Download Allure Report
        uses: actions/download-artifact@v4
        with:
          name: allure-report
          path: public/allure/
        continue-on-error: true

      - name: ⬇️ Download HTML Report
        uses: actions/download-artifact@v4
        with:
          name: cucumber-html-report
          path: public/cucumber/
        continue-on-error: true

      - name: 🏗️ Create Index Page
        run: |
          mkdir -p public
          cat > public/index.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
              <title>🎭 Playwright BDD Test Reports</title>
              <style>
                  body { font-family: Arial, sans-serif; margin: 40px; background: #f5f5f5; }
                  .container { max-width: 800px; margin: 0 auto; background: white; padding: 30px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
                  h1 { color: #333; text-align: center; }
                  .reports { display: flex; gap: 20px; margin-top: 30px; }
                  .report-card { flex: 1; border: 2px solid #ddd; border-radius: 8px; padding: 20px; text-align: center; transition: transform 0.2s; }
                  .report-card:hover { transform: translateY(-2px); border-color: #007bff; }
                  .report-card a { text-decoration: none; color: #007bff; font-weight: bold; font-size: 18px; }
                  .report-card p { color: #666; margin-top: 10px; }
                  .badge { background: #28a745; color: white; padding: 4px 8px; border-radius: 4px; font-size: 12px; }
              </style>
          </head>
          <body>
              <div class="container">
                  <h1>🎭 Playwright BDD Test Reports</h1>
                  <p style="text-align: center; color: #666;">SauceDemo E-commerce Testing Suite</p>
                  
                  <div class="reports">
                      <div class="report-card">
                          <a href="./allure/index.html" target="_blank">📊 Allure Report</a>
                          <p>Comprehensive test execution analytics with screenshots, timings, and detailed step-by-step results.</p>
                          <span class="badge">Interactive</span>
                      </div>
                      
                      <div class="report-card">
                          <a href="./cucumber/" target="_blank">🥒 Cucumber HTML Report</a>
                          <p>Business-readable BDD scenarios with Gherkin syntax and feature documentation.</p>
                          <span class="badge">BDD</span>
                      </div>
                  </div>
                  
                  <div style="margin-top: 30px; text-align: center; color: #888; font-size: 14px;">
                      Generated on: $(date)<br>
                      <a href="https://github.com/rilham97/web-automation-playwright" target="_blank">🔗 View Source Code</a>
                  </div>
              </div>
          </body>
          </html>
          EOF

      - name: 🔧 Setup Pages
        uses: actions/configure-pages@v4

      - name: 📤 Upload Pages Artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: public/

      - name: 🚀 Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
