name: 🎭 Playwright BDD Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of tests to run'
        required: true
        default: 'all'
        type: choice
        options:
        - all
        - smoke
        - login
        - cart
        - checkout
        - sorting

jobs:
  code-quality:
    name: 🔍 Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: 📋 Install dependencies
        run: npm ci

      - name: 🧹 Run ESLint
        run: npm run lint:check

  test-execution:
    name: 🧪 Tests (${{ matrix.browser }})
    runs-on: ubuntu-latest
    needs: code-quality
    strategy:
      fail-fast: false
      matrix:
        browser: [chromium, firefox, webkit]

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: 📋 Install dependencies
        run: npm ci

      - name: 🎭 Install Playwright browsers
        run: npx playwright install --with-deps ${{ matrix.browser }}

      - name: 🏃‍♂️ Run BDD Tests
        run: |
          if [ "${{ github.event.inputs.test_type }}" = "smoke" ]; then
            npm run bdd:smoke:headless
          elif [ "${{ github.event.inputs.test_type }}" = "login" ]; then
            npm run bdd:login:headless
          elif [ "${{ github.event.inputs.test_type }}" = "cart" ]; then
            npm run bdd:cart:headless
          elif [ "${{ github.event.inputs.test_type }}" = "checkout" ]; then
            npm run bdd:checkout:headless
          elif [ "${{ github.event.inputs.test_type }}" = "sorting" ]; then
            npm run bdd:sorting:headless
          else
            npm run bdd:headless
          fi

      - name: 📸 Upload screenshots on failure
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: screenshots-${{ matrix.browser }}
          path: screenshots/
          retention-days: 7

      - name: 📁 Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.browser }}
          path: |
            test-results/
            allure-results/
          retention-days: 30

  allure-report:
    name: 📊 Generate Allure Report
    runs-on: ubuntu-latest
    needs: test-execution
    if: always()

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: 📋 Install dependencies
        run: npm ci

      - name: ⬇️ Download all test results
        uses: actions/download-artifact@v4
        with:
          pattern: test-results-*
          path: collected-results/
          merge-multiple: true

      - name: 🎭 Install Playwright browsers
        run: npx playwright install chromium

      - name: 📊 Generate Allure Report
        run: |
          mkdir -p allure-results-combined
          find collected-results -name "allure-results" -type d -exec cp -r {}/* allure-results-combined/ \; || true
          npm run bdd:allure || true
          npm run allure:generate || true

      - name: 📤 Upload Allure Report
        uses: actions/upload-artifact@v4
        with:
          name: allure-report
          path: allure-report/
          retention-days: 30
